{"version":3,"sources":["components/ImageRequest.js","components/WeatherData.js","components/WeatherInfo.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Api_Key","process","ImageRequest","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","ci","loading","city","prevProps","_this2","fetch","concat","then","data","json","setState","hits","largeImageURL","catch","err","console","error","_this3","react_default","a","createElement","className","src","alt","Component","WeatherData","temperatura","wind","weather","WeatherInfo","temp","isLoading","main","description","speed","WeatherData_WeatherData","Form","getCity","e","target","value","getData","preventDefault","fillForm","WeatherInfo_WeatherInfo","ImageRequest_ImageRequest","onSubmit","type","name","onChange","App","components_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9bb1f3a2.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nconst Api_Key = process.env.REACT_APP_IMAGE_KEY\n\n\nexport default class ImageRequest extends Component {\n    constructor(props){\n        super(props)\n       this.state={ci:'', loading:false, city:this.props.ci}\n    }\n\n    componentDidUpdate (prevProps) {\n        if (this.props.ci !== prevProps.ci) {\n            const city = this.props.ci\n            fetch(`https://pixabay.com/api/?key=${Api_Key}&q=${city}&image_type=photo`)\n                .then(data => data.json())\n                .then(data => this.setState({\n                    ci: data.hits[0].largeImageURL,\n                    loading: false\n                }))\n                .catch(err => {\n                    if (err) console.error(\"Cannot fetch Weather Data from API, \", err)\n                })\n        }\n    }\n\n     componentDidMount() {\n     const city =  this.state.city\n        fetch(`https://pixabay.com/api/?key=${Api_Key}&q=${city}&image_type=photo`)\n            .then(data => data.json())\n            .then(data => this.setState({\n                ci: data.hits[0].largeImageURL,\n                loading:false\n            }))\n            .catch(err => {\n                if (err) console.error(\"Cannot fetch Weather Data from API, \", err)\n            })\n    }\n\n  render() {\n    return (\n      <div>\n            {!this.state.loading && (\n                <img className='myimg' src={this.state.ci} alt=\"city\" />\n            )}\n      </div>\n    )\n  }\n}\n\n\n","import React, { Component } from 'react'\n\n\nexport default class WeatherData extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Temperature: {this.props.temperatura} &#8451;</h1>\n        <h2>Speed of the wind: {this.props.wind} km/hour</h2>\n        <h2>You may describe the weather as: {this.props.weather}</h2> \n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport WeatherData from './WeatherData'\n\nconst Api_Key = process.env.REACT_APP_WEATHER_KEY\n\nexport default class WeatherInfo extends Component {\n    constructor(props){\n        super(props)\n        this.state={\n            temp: '',\n            weather: '',\n            wind: '',\n            isLoading:true,\n            city: this.props.city\n         }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.city !== prevProps.city) {\n            const city = this.props.city\n            fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${Api_Key}&units=metric`)\n                .then(data => data.json())\n                .then(data => this.setState({\n                    temp: data.main.temp,\n                    weather: data.weather[0].description,\n                    isLoading: false,\n                    wind: data.wind.speed\n                }))\n                .catch(err => {\n                    if (err) console.error(\"Cannot fetch Weather Data from API, \", err)\n                })\n        }\n    }\n\n    componentDidMount(){\n        const city= this.state.city   \n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${Api_Key}&units=metric`)\n        .then(data=>data.json())\n        .then(data => this.setState({ temp:data.main.temp,\n            weather: data.weather[0].description,\n            isLoading:false,\n            wind: data.wind.speed}))\n         .catch(err => {\n           if (err) console.error(\"Cannot fetch Weather Data from API, \", err)\n       }) \n    }\n         \n  render() {\n    return (\n        <div className='weather_info'>\n            {this.state.isLoading && <h1>Loading...Write the correct name of the city in English :)</h1>}\n            {!this.state.isLoading && (\n            <div>\n                <h1> The city is {this.props.city}</h1>\n                <WeatherData \n                temperatura={this.state.temp}\n                wind={this.state.wind}\n                weather={this.state.weather}/>\n            </div>\n        )}\n      </div>\n    )\n  }\n}\n\n","import React, { Component } from 'react'\nimport ImageRequest from './ImageRequest'\nimport WeatherInfo from './WeatherInfo'\n\n\n class Form extends Component {\n    constructor(){\n        super()\n        this.state={\n            city:'', \n            data:'',\n            loading: false\n        }  \n     }\n\n    getCity = e => {\n        this.setState({city :e.target.value})         \n     }\n \n    getData = e => {\n        e.preventDefault();  \n        this.setState({data:this.state.city, city:''})\n    }\n\n  render() {\n      let fillForm = this.state.data !== '' ? (\n          <div className='container'>\n              <WeatherInfo className='weather_info' city={this.state.data} /> \n              <ImageRequest className='image_info' ci={this.state.data} />\n          </div>\n       ):\n  (<div className='instruction'> !!! Type the name of the city in English</div>)\n \n    return (\n        <div className='main_form '>\n            <form onSubmit={this.getData}>\n                <input className='myInput' \n                    type=\"text\"\n                    value={this.state.city}\n                    name=\"city\"\n                    onChange={this.getCity}/>\n                <button className='myBtn' \n                    type='submit'>\n                    Submit</button>\n            <div className='try'/>         \n            </form>\n            {fillForm}       \n        </div>\n    )\n  }\n}\nexport default Form\n","import React, { Component } from 'react';\nimport Form from './components/Form'\nimport './output.css'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"main_container\">\n        <div className='myBorder'></div>\n        <div className='introWords'>\n          <h1>Hello :) <span>Welcome to my weather page!!!!</span></h1>\n         </div>\n        <Form/>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}